### cli ###
- if no server root path is provide, use the current directory where the cli is executed

### config ###

### common ###

### server ###
server dir/                 (current directory where the cli is executed to init the service)
    config/
        wellik-server.json  (default path to look for a config file if none is given)
    certs/
        tls/                (dafault path to search, may be null if the cert path is provided)
            cert.pem
            key.pem
        root/               (generated when init)
            wellik-root-key.pem    (private key)
            wellik-root-cert.pem   (public key)
        users/              (copy of user's public key, when create-user via cli)
            username1-cert.pem 
            username2-cert.pem
    data/ 
        wellik.sqlite       (generated when init, if database path is not provided in the config file)
        wellik-server.pid
    log/

### Server API ###
- Config values
  - GET `/data/app=?&key=?`
    - According to the client role, get the encrypted value from the db
    - send it to the client
    - the client decrypt the value by it private key
  - POST `/data/`
    - body: app, config key, config value
    - update / insert value
    - Client send the plaintext value to the server (via HTTPS so is secure)
    - server get all public key for user that has access right to this value
    - server encrypt the value with each key (N key => N encrypted value) and store them in the database
    - server publish a config change message
  - DELETE `/data/`
    - body: app, config key, config value
- APP / User
  - POST / DELETE `/users/`
    - body: username
    - create / delete a app / admin
    - param: app, public key
    - if app => also create / delete a corresponding app user. can used by admin (admin has the right on this app then) & superuser
    - if admin => can only used by superuser
    - response: 
      - an constant encrypted using the provided public key
      - client should try to decrypt the value to validate the encrypt-decrypt process 
      - success => activate the account by making a API call
      - fail => delete the user & try again
  - POST `/users/activate/`
    - body: username
    - activate the user after validated the keys
  - POST `/admins/access`
    - body: admin username, appname, operation: grant / ban
    - edit the admin access right
    - can only used by superuser